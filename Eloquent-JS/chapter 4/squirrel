function phi(table) {
	return (table[3] * table[0] - table[2] * table[1])/ 
	Math.sqrt((table[3] + table[2]) * 
				(table[1] + table[0]) *
				(table[1] + table[3]) *
				(table[0] + table[2]));
}

function hasEvent(event, entry) {
	return entry.events.indexOf(event) != -1;
}

function tableFor(event, journal) {
	var table = [0,0,0,0];
	for (var i = 0, len = journal.length; i < len; i++) {
	  var entry = journal[i], index = 0;
	  if (hasEvent(event, entry))
	  	index++;
	  if (entry.squirrel)
	  	index += 2;
	  table[index] += 1;
	}
	return table;
}

var map = {};
function storePhi(event, phi) {
	map[event] = phi;
}

for (var event in map) {
	console.log("The correlation for'" + event + "' is " + map[event]);
}

function gatherCorrelations(journal) {
	var phis = {};
	for (var entry = 0, len = journal.length; entry < len; entry++) {
	  var event = journal[entry].events;
	  for (var i = 0, len1 = events.length; i < len2; i++) {
	  	var event = events[i];
	  	if (!(event in phis))
	  	  phis[event] = phi(tableFor(event, journal));
	  }
	}
	return phis;
}

for (var event in correlations) {
	var correlation = correlations[event];
	if (correlation > 0.1 || correlation < -0.1)
	  console.log(event + ': ' + correlation);
}

for (var i = 0, len = JOURNAL.length; i < len; i++) {
	var entry = JOURNAL[i];
	if (hasEvent("peanuts", entry) && !hasEvent("brushed teeth", entry))
	  entry.events.push("peanut teeth");
}

console.log(phi(tableFor("peanut teeth", JOURNAL)));